<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Goutte;
use Storage;
use App\Traits\DateFunctions;


class SearchController extends Controller
{
    use DateFunctions;

    private $maxItemPerSite = 10;
    private $maxItemOwnSite = 10;
    private $displayExternalLink = true;
    private $searchResults = [];
    private $dateRangeStart = "";
    private $dateRangeEnd = "";
    private $adLandingPage = "https://ontarioconstructionnews.com/";
    private $strictSearch = false;
    // private $fp = null;
    private $str_compare_arr = [];
    
    public function search(Request $request){


        // $this->fp = fopen( dirname(__FILE__) . DIRECTORY_SEPARATOR . 'log.txt', 'w');
        
        // $dateBetween = $request->dateBetween;

        // $dateArray = explode('-',$dateBetween);

        // $this->dateRangeStart = $this->getFormattedDate(trim($dateArray[0]), 'd/m/Y', 'Y-m-d');
        // $this->dateRangeEnd = $this->getFormattedDate(trim($dateArray[1]), 'd/m/Y', 'Y-m-d');

        $searchKeyword = $request->search;

        if($searchKeyword[0] == '"' && $searchKeyword[strlen($searchKeyword) - 1] == '"'){
            // do something
            $this->strictSearch = true;

        }

        $this->dateRangeStart = $this->getFormattedDate($request->dateStart, 'd/m/Y', 'Y-m-d');
        $this->dateRangeEnd = $this->getFormattedDate($request->dateEnd, 'd/m/Y', 'Y-m-d');

        
        $this->searchResults = [];

        $resultFromOntario = [];
        $resultFromConstruct = [];
        $resultFromLink = [];

        dd($request);
        
        $resultFromOntario = $this->scrapeOntarioConstructionNews($request);
        // $resultFromConstruct = $this->scrapeConstructConnect($request);
        // $resultFromLink = $this->scrapeLink2Build($request);

        $mixResult = $resultFromConstruct;
        $mixResult = array_merge($mixResult, $resultFromLink);

        if($this->strictSearch){
            
            //filter other website data
            $newResult = [];
            foreach($mixResult as $result){

                if($this->arraySearchStr($result,trim($request['search'],'"'))){
                    array_push($newResult, $result);
                }

            }
            $mixResult = $newResult;


            //filter own website data
            $newResult = [];
            foreach($resultFromOntario as $result){

                // dd($this->arraySearchStr($result,trim($request['search'],'"')));

                if($this->arraySearchStr($result,trim($request['search'],'"'))){
                    array_push($newResult, $result);
                }

                dd($this->str_compare_arr);
                die();

            }
            $resultFromOntario = $newResult;


            
        }

        // dd($mixResult);

        // shuffle($mixResult);

        if(count($resultFromOntario)){
            $this->searchResults = $resultFromOntario;
        }
        else{
            $this->searchResults = [
                [
                    'ad' => true,
                    'url' => $this->getAd(),
                    'landingPage' => $this->adLandingPage
                ]
            ];
        }
        
        $certificates = array_merge($this->searchResults, $mixResult);
        $resultCount = count($certificates);

        // foreach($certificates as $certificate){

        //     if(!isset($certificate['owner'])){
        //         dd($certificate);
        //     }
        // }

      
        // $previousPageLink
        // $previousPageLink

        $pageTitle = "Search Results - Certificate Substantial Performance";

        $pagination = $this->pagination($request);

        $totalResult = count($mixResult) + count($resultFromOntario);

        // fclose($this->fp);
        
        return view('search', compact('certificates', 'pageTitle','pagination', 'totalResult'));

    }

    private function pagination($request){
        
        $pagination = [];

        if($request->page){
            $page = $request->page;
        }
        else
        {
            $page = 1;
        }

        $params = [
            'search' => $request['search'],
            // 'dateBetween' => $request['dateBetween'],
            'dateStart' => $request['dateStart'],
            'dateEnd' => $request['dateEnd']
        ];

        // if(isset($request['dateBetween']) && !empty($request['sdate'])){
        //     $params['sdate'] = $request['sdate'];
        // }
        
        // if(isset($request['edate']) && !empty($request['edate'])){
        //     $params['edate'] = $request['edate'];
        // }
      
        $pagination['page'] = $page;

        $params['page'] = $page - 1;
        $searchUrl = route('search', $params);
        $pagination['previousPageLink'] = $searchUrl;
        
        $params['page'] = $page + 1;
        $searchUrl = route('search', $params);
        $pagination['nextPageLink'] = $searchUrl;


        if($page > 1){
            $params['page'] = 1;
            $searchUrl = route('search', $params);
            $pagination['pageOne'] = $searchUrl;
            $pagination['pageOneVal'] = $params['page'];
        }


        $params['page'] = $page + 3;
        $searchUrl = route('search', $params);
        $pagination['nPlusTwo'] = $searchUrl;
        $pagination['nPlusTwoVal'] = $params['page'];

        return $pagination;
       
    }

    private function scrapeConstructConnect($request){
        $params = [
            'phrase' => trim($request['search'],'"'),
            'date' => 'custom',
            'date_from' => $this->dateRangeStart,
            'date_to' => $this->dateRangeEnd
        ];

        if(isset($request['sdate']) && !empty($request['sdate'])){
            $params['date_from'] = $request['sdate'];
        }
        
        if(isset($request['edate']) && !empty($request['edate'])){
            $params['date_to'] = $request['edate'];
        }

        if(isset($request['page']) && !empty($request['page'])){
            $params['ccpage'] = $request['page'];
        }
        
        $url = "https://canada.constructconnect.com/dcn/certificates-and-notices?" . http_build_query($params);

        // die($url);

        $crawler = Goutte::request('GET', $url);

        $crawler = $crawler->filter('.search-results__wrapper');

        $searchResultsSiteWise = [];

        $crawler->filter('.search-results__wrapper .cards-item')->each(function ($card) use ( &$searchResultsSiteWise ) {

            $certificate = ['ad' => false, 'owner_data' => []];
            $certificate['site'] = "constructconnect.com";
            $certificate['title'] = $card->filter('.cards-title a')->text();
            

            if($this->displayExternalLink)
                $certificate['link'] = 'https://canada.constructconnect.com' . $card->filter('.cards-title a')->attr('href');
            else
                $certificate['link'] = '#';

            $line = 1;
            // $card->filter('dl dd')->each(function ($child) use (&$line, &$certificate) {
            //     $objectText = $child->text();
                
            //     if($line == 1){
            //         $certificate['location'] = $objectText;
            //     }

            //     if($line == 2){
            //         $certificate['date_of_publish'] = $objectText;
            //     }

            //     if($line == 3){
            //         $certificate['contractor'] = $objectText;
            //     }

            //     if($line == 4){
            //         $certificate['owner'] = $objectText;
            //     }
                
            //     $line++;
            // });

            $card->filter('.cards-header dl')->each(function ($dl) use (&$line, &$certificate) {

                $attr = $dl->filter('dt')->text();

                switch($attr){
                    case 'Published':   $certificate['date_of_publish'] = $dl->filter('dd')->text();
                                        break;

                    case 'Location of premises':    $certificate['location'] = $dl->filter('dd')->text();
                                                    break;
                }

                // if(!isset($certificate['owner'])){
                //     //above commented approch works for most of the cases, but there are a few cases where owner and contractor row is reversed
                //     // $certificate['owner'] = 'TEST DATA - NEED MODIFICATION';
                // }
                
            });

            // dd($certificate);


            $elements = [];

            $line = 1;

            $card->filter('.cards-inner > dl')->each(function ($dl) use (&$line, &$certificate, &$elements) {

                $tmpElement = [];

                $dl->children()->each(function($child) use (&$tmpElement){
                    $attr = $child->text();
                    array_push($tmpElement, $attr);
                });

                // $dl->filter('*')->each(function($child) use (&$tmpElement){
                //     $attr = $child->text();
                //     array_push($tmpElement, $attr);
                // });


                // dd($tmpElement);

                if(isset($tmpElement[0]) && isset($tmpElement[1])){
                    // $certificate[$tmpElement[0]] = $tmpElement[1];
                    array_push($certificate['owner_data'], [
                        'title' => $tmpElement[0],
                        'data' => $tmpElement[1]
                    ]);
                }

                if(isset($tmpElement[2]) && isset($tmpElement[3])){
                    array_push($certificate['owner_data'], [
                        'title' => $tmpElement[2],
                        'data' => $tmpElement[3]
                    ]);
                }
            });

           
            // dd($certificate);
           
            array_push($searchResultsSiteWise, $certificate);
        
        });

        $searchResultsSiteWise = array_slice($searchResultsSiteWise, 0, $this->maxItemPerSite);
        return array_merge($this->searchResults, $searchResultsSiteWise);
    }


    private function scrapeLink2Build($request){

        $dateStart = $this->getFormattedDate($this->dateRangeStart,'Y-m-d','m/d/Y');
        $dateEnd = $this->getFormattedDate($this->dateRangeEnd,'Y-m-d','m/d/Y');
        // DateText: 04/01/2020 - 04/30/2020
        $params = [
            'Search' => trim($request['search'],'"'),
            'DateText' => $dateStart . ' - ' . $dateEnd
        ];

        // if(isset($request['sdate']) && !empty($request['sdate'])){
        //     $params['date_from'] = $request['sdate'];
        // }
        
        // if(isset($request['edate']) && !empty($request['edate'])){
        //     $params['date_to'] = $request['edate'];
        // }


        $url = "https://certificates.link2build.ca/?" . http_build_query($params);

        // die($url);
        $crawler = Goutte::request('GET', $url);

        $crawler = $crawler->filter('.datatable');

        $searchResultsSiteWise = [];

        $crawler->filter('tbody tr')->each(function ($tr) use ( &$searchResultsSiteWise ) {
            // $certificate = ['ad' => false];
            $certificate = ['ad' => false, 'owner_data' => []];
            $certificate['site'] = "link2build.ca";
            $certificate['title'] = $tr->filter('td a')->text();

            if($this->displayExternalLink)
                $certificate['link'] = 'https://certificates.link2build.ca' . $tr->filter('td a')->attr('href');
            else
            $certificate['link'] = '#';

            $columnNo = 1;
            $tr->filter('td')->each(function ($columns) use (&$columnNo, &$certificate) {
                $objectText = $columns->text();
                
                if($columnNo == 1){
                    // $certificate['location'] = $objectText;
                    $certificate['location'] = trim(str_replace($certificate['title'],'',$objectText));
                }

                if($columnNo == 2){
                    $certificate['date_of_publish'] = $objectText;
                }

                if($columnNo == 3){
                    // $certificate['owner'] = $objectText;
                    $o_data = [
                        'title' => 'Owner',
                        'data' => $objectText
                    ];
                    
                    array_push($certificate['owner_data'],$o_data);
                }

                if($columnNo == 4){
                    // $certificate['contractor'] = $objectText;
                    $o_data = [
                        'title' => 'Contractor',
                        'data' => $objectText
                    ];
                    
                    array_push($certificate['owner_data'],$o_data);
                    
                }
                
                $columnNo++;
            });
           
            array_push($searchResultsSiteWise, $certificate);
        
        });

        if($request->page){
            $page = $request->page;
        }
        else
        {
            $page = 1;
        }
        
        $startIndex = $this->maxItemPerSite * ($page - 1);

        $searchResultsSiteWise = array_slice($searchResultsSiteWise, $startIndex, $this->maxItemPerSite);
        return array_merge($this->searchResults, $searchResultsSiteWise);
    }


    private function scrapeOntarioConstructionNews($request){

        //contractor_name_like=&date_published=custom&date_published_from=2020-04-01&date_published_to=2020-04-30


        dd(trim($request['search'],'"'));
        $params = [
            'per_page' => $this->maxItemOwnSite,
            'search' => trim($request['search'],'"'),
            'date_published' => 'custom',
            'date_published_from' => $this->dateRangeStart,
            'date_published_to' => $this->dateRangeEnd
        ];

        if(isset($request['page']) && !empty($request['page'])){
            $params['certificates_page'] = $request['page'];
        }


        // if(isset($request['sdate']) && !empty($request['sdate'])){
        //     $params['date_from'] = $request['sdate'];
        // }
        
        // if(isset($request['edate']) && !empty($request['edate'])){
        //     $params['date_to'] = $request['edate'];
        // }

      
        
        $url = "https://ontarioconstructionnews.com/certificates/?" . http_build_query($params);

        // die($url);

        $crawler = Goutte::request('GET', $url);

        $crawler = $crawler->filter('.ocn-certificates-table');

        $searchResultsSiteWise = [];

        $crawler->filter('.ocn-certificate-row')->each(function ($tr) use ( &$searchResultsSiteWise ) {
                        
            $certificate = ['ad' => false, 'owner_data' => []];
            $certificate['site'] = "ontarioconstructionnews.com";
            $certificate['title'] = $tr->filter('td a')->text();
            $certificate['link'] = $tr->filter('td a')->attr('href');

            $columnNo = 1;
            $tr->filter('td')->each(function ($columns) use (&$columnNo, &$certificate) {
                $objectText = $columns->text();
                
                if($columnNo == 1){
                    // $certificate['location'] = $objectText;
                    $certificate['location'] = trim(str_replace($certificate['title'],'',$objectText));
                }

                if($columnNo == 2){
                    // $certificate['date_of_publish'] = $objectText;
                    $certificate['date_of_publish'] = $this->getFormattedDate(trim($objectText), 'y/m/d', 'F j, Y');

                }

                if($columnNo == 3){
                    $o_data = [
                        'title' => 'Owner',
                        'data' => $objectText
                    ];
                    
                    array_push($certificate['owner_data'],$o_data);
                }

                if($columnNo == 4){
                    $o_data = [
                        'title' => 'Contractor',
                        'data' => $objectText
                    ];
                    
                    array_push($certificate['owner_data'],$o_data);
                }
                
                $columnNo++;
            });

            // dd($certificate);
           
            array_push($searchResultsSiteWise, $certificate);

        });

        $searchResultsSiteWise = array_slice($searchResultsSiteWise, 0, $this->maxItemOwnSite);
        return array_merge($this->searchResults, $searchResultsSiteWise);
    }

    private function getAd(){
        $path = storage_path('app' . DIRECTORY_SEPARATOR . 'public' . DIRECTORY_SEPARATOR . 'ads');
        if(!\file_exists($path)){
            \mkdir($path,0777, true);
            die('Please create ad directory');
        }


        $files = scandir( $path );

        $adFiles = [];

        $count = 0;
        foreach($files as $file){

            $mime_type = mime_content_type($path . DIRECTORY_SEPARATOR . $file);
            if($mime_type == 'directory' && $count++ < 20) 
                continue;
            
            array_push($adFiles, $file);
        }

        if(count($adFiles)){
            $adFile = \array_rand($adFiles);

            $randomAd = $adFile;
            return Storage::url('ads/'.$file);
        }
        else
            return null;
    }

    private function arraySearchStr($array, $search){

        foreach($array as $key => $child){

            if(is_array($child)){
                if($this->arraySearchStr($child, $search) === true)
                    return true;
            }
            else if(($resp = stripos($child, $search)) !== false ){
                // fwrite($this->fp, $resp);

                array_push($this->str_compare_arr, 'True: ' . $resp);
                return true;
            }
            else{
                array_push($this->str_compare_arr, 'False: ' . $resp);
            }
        }

        return false;
    }
}